class HDMerchantSkin {
	name skinId;

	string tag;
	name sprite;

	Vector2 scale;

	string openState;
	string closeState;
	
	string openSound;
	string closeSound;

	static HDMerchantSkin Create(name id, string tag = "$TAG_MERCHANT", name sprite = 'HOBM', Vector2 scale = (1.0, 1.0), string openState = "OpenMenu.Default", string openSound = "", string closeState = "SpawnLoop", string closeSound = "") {
		HDMerchantSkin skin = new('HDMerchantSkin');

		if (skin) {
			skin.skinId = id;
			skin.tag = tag;
			skin.sprite = sprite;
			skin.scale = scale;
			skin.openState = openState;
			skin.openSound = openSound;
			skin.closeState = closeState;
			skin.closeSound = closeSound;
		}

		return skin;
	}

	string toString() {
		return String.format(
			"{ \"skinId\": \"%s\", \"tag\": \"%s\", \"sprite\": \"%s\", \"scale\": (%.2f, %.2f), \"openState\": \"%s\", \"openSound\": \"%s\", \"closeState\": \"%s\", \"closeSound\": \"%s\" }",
			     skinId,             tag,             sprite,             scale.x, scale.y,        openState,             openSound,             closeState,             closeSound
		);
	}
}

extend class HDMerchant {

	void InitSkins() {

		// Grab a reference to the Skin Registry Event Handler
		let handler = MerchantHandler(EventHandler.Find("MerchantHandler"));

		// Create a list to store the intended skins
		Array<HDMerchantSkin> AvailableSkins;
		AvailableSkins.clear();

		let store = handler.getStore(StoreType);
		HDCore.log('Merchant', LOGGING_DEBUG, "Getting available skins from "..StoreType.." Store => "..store.toString());

		forEach(skinName : store.skins) {
			let skin = handler.getMerchantSkin(skinName);

			if (skin) {
				HDCore.log('Merchant', LOGGING_TRACE, StoreType.." Merchant adding "..skinName.." skin => "..skin.toString());
	
				if (AvailableSkins.find(skin) == AvailableSkins.size()) AvailableSkins.push(skin);
			}
		}

		// If we have at least one skin available, pick one at random
		if (AvailableSkins.Size() > 0) {
			SelectedSkin = AvailableSkins[random[merchskinrand](0, AvailableSkins.Size() - 1)];

			HDCore.log('Merchant', LOGGING_TRACE, "Selected "..SelectedSkin.skinId.." for "..storeType.." Merchant");
		}
	}
	
	States {
		RegisterSprites:
			RESM A 0; HOBM A 0;
			MSUC A 0;
			MSHU A 0;
			WTRD A 0;
			DAI1 A 0; DAI2 A 0; DAI3 A 0; DAI4 A 0;
			NAR1 A 0;
		Spawn:
			HOBM A 0 NoDelay {
				if (SelectedSkin) {
					SetTag(StringTable.Localize(SelectedSkin.tag));
					sprite = GetSpriteIndex(SelectedSkin.sprite);
					scale = SelectedSkin.scale;
				}
			}
		SpawnLoop:
			#### A 1 CheckBreathing();
			Loop;

		OpenMenu:
			#### A 1 {
				if (SelectedSkin && SelectedSkin.openState) {
					A_StartSound(SelectedSkin.openSound, CHAN_VOICE);

					return FindStateByString(SelectedSkin.openState);
				}

				return FindState('SpawnLoop');
			}
			Goto SpawnLoop;

		CloseMenu:
			#### A 1 {
				if (SelectedSkin && SelectedSkin.closeState) {
					A_StartSound(SelectedSkin.closeSound, CHAN_VOICE);

					return FindStateByString(SelectedSkin.closeState);
				}

				return FindState('SpawnLoop');
			}
			Goto SpawnLoop;

		OpenMenu.Default:
			#### A 1;
		Buying.Default:
			#### # 1 BuyingIdle(SelectedSkin.closeState, SelectedSkin.closeSound);
			Loop;
		GoAway.Default:
			#### A 1;
			Goto SpawnLoop;

		Buying.ResidentEvil:
			#### A 1 BuyingIdle(SelectedSkin.closeState, SelectedSkin.closeSound);
			Loop;

		OpenMenu.Morshu:
			#### BCDEF 5;
		Buying.Morshu:
			#### # 1 BuyingIdle(SelectedSkin.closeState, SelectedSkin.closeSound);
			Loop;
		GoAway.Morshu:
			#### FEDCBA 5;
			Goto SpawnLoop;

		Buying.WanderingTrader:
			#### A 1 BuyingIdle(SelectedSkin.closeState, SelectedSkin.closeSound);
			Loop;

		OpenMenu.Succubus:
			#### EE 1 { scale.y -= 0.04; }
			#### FF 1 { scale.y -= 0.04; SOffsetY -= 2; } // [Ace] It's so that the take off frame doesn't clip into the ground.
			#### GG 1 { scale.y -= 0.04; SOffsetY -= 2; }
			#### G 0 {
				scale.y += 0.04 * 6;
				A_StartSound("Succubus/Wings");
			}
			#### BBBCCCDDDEEEFFFGGG 1 {
				double OffAmt = (30 + SOffsetY) * 0.15;
				SOffsetY -= OffAmt;
			}
		Buying.Succubus:
			#### B 0 A_StartSound("Succubus/Wings");
			#### BCDEFG 3 BuyingIdle(SelectedSkin.closeState, SelectedSkin.closeSound);
			Loop;
		GoAway.Succubus:
			#### BBBBCCCCDDDDEEEEFFFFGGGGBBBBCCCCDDDDEEEE 1 { SOffsetY *= 0.94; }
			#### A 1 { SOffsetY = 0; }
			Goto SpawnLoop;

		OpenMenu.Daina.Default:
			#### BCDEFGH 4;
		Buying.Daina.Default:
			#### # 1 BuyingIdle(SelectedSkin.closeState, SelectedSkin.closeSound);
			Loop;
		GoAway.Daina.Default:
			#### GFEDDCCBBA 2;
			Goto SpawnLoop;

		OpenMenu.Daina.Bunny:
			#### BCDEFGHIG 4;
		Buying.Daina.Bunny:
			#### # 1 BuyingIdle(SelectedSkin.closeState, SelectedSkin.closeSound);
			Loop;
		GoAway.Daina.Bunny:
			#### GFEDCBA 4;
			Goto SpawnLoop;

		OpenMenu.Daina.Maid:
			#### BCDEFGHIJKLMN 2;
		Buying.Daina.Maid:
			#### # 1 BuyingIdle(SelectedSkin.closeState, SelectedSkin.closeSound);
			Loop;
		GoAway.Daina.Maid:
			#### NMLKJA 2;
			Goto SpawnLoop;

		OpenMenu.Daina.Succubus:
			#### BCDEFGHIJE 4;
		Buying.Daina.Succubus:
			#### # 1 BuyingIdle(SelectedSkin.closeState, SelectedSkin.closeSound);
			Loop;
		GoAway.Daina.Succubus:
			#### EDCBA 4;
			Goto SpawnLoop;

		OpenMenu.Daina.Cowgirl:
			#### BCDEEFFEEFFEEFFFFGHIJK 2;
			#### L 2 A_StartSound("weapons/pistol");
			#### MNOPQR 2;
		Buying.Daina.Cowgirl:
			#### # 1 BuyingIdle(SelectedSkin.closeState, SelectedSkin.closeSound);
			Loop;
		GoAway.Daina.Cowgirl:
			#### RKJIHGFDCBA 2;
			Goto SpawnLoop;

		OpenMenu.Daina.Labcoat:
			#### BCDEFGHIJKKLMMNNOO 4;
		Buying.Daina.Labcoat:
			#### # 1 BuyingIdle(SelectedSkin.closeState, SelectedSkin.closeSound);
			Loop;
		GoAway.Daina.Labcoat:
			#### LKJIHGFEDCBA 4;
			Goto SpawnLoop;

		OpenMenu.Nari.Succubus:
			#### BCDEFGHII 4;
		Buying.Nari.Succubus:
			#### JKLMI 8 BuyingIdle(SelectedSkin.closeState, SelectedSkin.closeSound);
			Loop;
		GoAway.Nari.Succubus:
			#### IHGFEDCB 4;
			Goto SpawnLoop;
	}
}
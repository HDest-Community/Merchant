class MerchantShopMenu : HDZFGenericMenu {

    MerchantHandler Handler;
    int SelCategoryIndex;
    int SelCurrencyIndex;

    const Spacing = 3;

    Array<MerchantCategoryFrame> catFrames;
    HDZFListFrame shopContent;

    override void Init(Menu parent) {
        Super.Init(parent);

        menuactive = Menu.OnNoPause;
        Handler = MerchantHandler(EventHandler.Find("MerchantHandler"));


        vector2 virtRes = (640, 480);
        SetBaseResolution(virtRes);

        vector2 basePos = (virtRes.x * 0.1, 10);
        vector2 sSize = (virtRes.x - basePos.x * 2, virtRes.y - SmallFont.GetHeight() - (Spacing * 2.0));
        BuildShopFrame(basePos, sSize);
    }

    static clearscope double GetBoxedScale(vector2 size, vector2 boxSize) {
        return max(size.x / boxSize.x, size.y / boxSize.y);
    }

    ui MerchantStore GetOpenedStore() {
        return Handler.Stores[Handler.OpenedStoreIndex[consoleplayer]];
    }

    ui string GetSelectedCategory() {
        let openedStore = GetOpenedStore();
        return SelCategoryIndex < openedStore.Categories.Size() ? openedStore.Categories[SelCategoryIndex] : "Unknown Category";
    }

    ui void GetItemsInCategory(out Array<StoreItem> items, string category) {
        items.Clear();

        // Add all items in the current category that aren't the current currency.
        foreach (storeItem : GetOpenedStore().storeItems) {
            if (
                storeItem.GetCategory() == category
                && storeItem.GetItem() != Handler.StoreCurrencies[SelCurrencyIndex].GetCurrencyClass()
            ) items.Push(storeItem);
        }
    }

    private ui void BuildShopFrame(vector2 pos, vector2 size) {

        shopContent = HDZFListFrame.create((0,0), (size.x, 0), Spacing * 2.0);

        foreach (category : GetOpenedStore().Categories) {

            Array<StoreItem> items;
            GetItemsInCategory(items, category);
            
            let catFrame = MerchantCategoryFrame.create(
                (0, 0),
                size - (8, 0),
                Spacing,
                self,
                players[consoleplayer].mo,
                category,
                items
            );
            catFrames.push(catFrame);
            catFrame.pack(shopContent);
        }

        setScrollHeight();
        buildFocusableBtns();

        HDZFScrollContainer.create(
            pos, size + (8, -pos.y),
            8.0, shopContent.getHeight(), 15.0,
            HDZFBoxTextures.createTexturePixels('Graphics/CommonBackgroundNormal.png', (7,7), (14,14), true, true),
            HDZFBoxTextures.createTexturePixels('Graphics/CommonBackgroundHover.png', (7,7), (14,14), true, true),
            HDZFBoxTextures.createTexturePixels('Graphics/CommonBackgroundClick.png', (7,7), (14,14), true, true),
            HDZFBoxTextures.createTexturePixels('Graphics/CommonBackground.png', (7,7), (14,14), true, true),
            shopContent,
            Spacing
        ).pack(MainFrame);

        MerchantCurrencyFrame.create(
            (MainFrame.getWidth() - 35, 0),
            (35, 35),
            self,
            players[consoleplayer].mo
        ).pack(MainFrame);
    }

    void setScrollHeight() {
        let height = 0;

        foreach (catFrame : catFrames) height += catFrame.getHeight() + shopContent.getPadding();

        shopContent.setHeight(height);
    }

    void buildFocusableBtns() {
        Array<HDZFButtonBase> focusableBtns;
        foreach (catFrame : catFrames) {
            let toggleBtn = catFrame.categoryHeader.toggleBtn;
            focusableBtns.push(toggleBtn);

            if (!toggleBtn.isOn()) {
                foreach (itemFrame : catFrame.itemFrames) focusableBtns.push(itemFrame.itemBtn);
            }
        }

        let focusHelper = HDZFFocusLinkHelper.create(1, focusableBtns.size(), false, false);
        for (let i = 0; i < focusableBtns.size(); i++) focusHelper.setElement(i, 0, focusableBtns[i]);
        focusHelper.setLinks();

        if (focusableBtns.size()) {
            focusDefaults[HDZFNavEventType_Down] = focusableBtns[0];
            focusDefaults[HDZFNavEventType_Up] = focusableBtns[focusableBtns.size() - 1];
        }
    }

    override void ticker() {
        super.ticker();

        let height = 0;
        foreach (catFrame : catFrames) height += catFrame.getHeight() + shopContent.getPadding();

        shopContent.setHeight(height);
    }

    override void setupFocusIndicator() {
        setFocusIndicator(HDZFBoxImage.create(
            (0, 0), (0, 0),
            HDZFBoxTextures.CreateTexturePixels('Graphics/FocusIndicator.png', (7, 7), (14, 14), true, true)
        ));
        setFocusPriority(HDZFFocusPriority_JustAboveFocused);
    }

    override void changeFocusIndicator(HDZFElement oldFocus, HDZFElement newFocus) {
        if (newFocus) positionFocusIndicator(newFocus.getPos(), newFocus.getSize());
    }

    override void positionFocusIndicator(Vector2 pos, Vector2 size) {
        getFocusIndicator().setBox(pos, size);
    }
}
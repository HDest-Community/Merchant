enum ItemType {
    SType_Weapon,
    SType_Ammo,
    SType_Item
}

class StoreItem {
    
    // --------------------------------------------------
    // VARIABLES
    // --------------------------------------------------

    name type;
    double chance;
    string category;
    name itemName;
    string icon;
    string displayName;
    string flavorText;
    int baseAmount;
    int basePrice;
    int baseStoreAmount;

    // The current amount in the store
    int StoreAmount;


    // --------------------------------------------------
    // STATIC
    // --------------------------------------------------

    static StoreItem Create(
        name type,
        double chance,
        string category,
        name itemName,
        string icon,
        string displayName,
        string flavorText,
        int baseAmount,
        int basePrice,
        int baseStoreAmount
    ) {
        let item = StoreItem(new('StoreItem'));

        if (item) {
            item.type            = type;
            item.chance          = chance;
            item.category        = category;
            item.itemName        = itemName;
            item.icon            = icon;
            item.displayName     = displayName;
            item.flavorText      = flavorText;
            item.baseAmount      = baseAmount;
            item.basePrice       = basePrice;
            item.baseStoreAmount = baseStoreAmount;
        }

        return item;
    }

    static int GetAdjustedPrice(StoreItem item, StoreCurrency currency)
    {
        return int(max(ceil(item.GetBasePrice() * currency.GetPriceMult()), 1));
    }

    virtual name GetType() { return type; }
    virtual double GetChance() { return chance; }
    virtual string GetCategory() { return category; }
    virtual name GetItem() { return itemName; }
    virtual string GetIcon() { return icon; }
    virtual string GetDisplayName() { return displayName; }
    virtual string GetFlavorText() { return flavorText; }
    virtual int GetAmount() { return baseAmount; }
    virtual int GetBasePrice() { return basePrice; }
    virtual int GetStoreAmount() { return storeAmount ? storeAmount : baseStoreAmount; }

    string ToString() {
        return String.format(
            "{ \"type\": \"%s\", \"chance\": %.3f, \"category\": \"%s\", \"item\": \"%s\", \"icon\": \"%s\", \"displayName\": \"%s\", \"flavorText\": \"%s\", \"baseAmount\": %i, \"basePrice\": %i }",
                 GetType(),        GetChance(),      GetCategory(),        GetItem(),        GetIcon(),        GetDisplayName(),        GetFlavorText(),        GetAmount(),        GetBasePrice()
        );
    }
}

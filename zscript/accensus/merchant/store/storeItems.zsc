enum ItemType
{
    SType_Weapon,
    SType_Ammo,
    SType_Item
}

class StoreItem {
    
    // --------------------------------------------------
    // VARIABLES
    // --------------------------------------------------

    bool enabled;
    double chance;
    
    int type;
    string category;
    name itemName;
    string icon;
    string displayName;
    string flavorText;
    int baseAmount;
    int basePrice;

    // The current amount in the store
    int StoreAmount;


    // --------------------------------------------------
    // STATIC
    // --------------------------------------------------

    static StoreItem Create(
        bool enabled,
        double chance,
        int type,
        string category,
        name itemName,
        string icon,
        string displayName,
        string flavorText,
        int baseAmount,
        int basePrice
    ) {
        let item = StoreItem(new('StoreItem'));

        if (item) {
            item.enabled     = enabled;
            item.chance      = chance;
            item.type        = type;
            item.category    = category;
            item.itemName    = itemName;
            item.icon        = icon;
            item.displayName = displayName;
            item.flavorText  = flavorText;
            item.baseAmount  = baseAmount;
            item.basePrice   = basePrice;
        }

        return item;
    }

    static int GetAdjustedPrice(StoreItem item, StoreCurrency currency)
    {
        return int(max(ceil(item.GetBasePrice() * currency.GetPriceMult()), 1));
    }

    // --------------------------------------------------
    // VIRTUALS
    // --------------------------------------------------

    virtual bool IsEnabled() { return enabled; }
    virtual double GetChance() { return chance; }
    virtual int GetType() { return type; }
    virtual string GetCategory() { return category; }
    virtual name GetItem() { return itemName; }
    virtual string GetIcon() { return icon; }
    virtual string GetDisplayName() { return displayName; }
    virtual string GetFlavorText() { return flavorText; }
    virtual int GetAmount() { return baseAmount; }
    virtual int GetBasePrice() { return basePrice; }

    // TODO: Refactor thresholds, types, amounts into commands?
    virtual int GetStoreAmount()
    {
        switch (GetType())
        {
            case SType_Weapon:
            {
                return randompick[merchrand](1, 1, 1, 1, 1, 1, 1, 2);
            }
            case SType_Ammo:
            {
                if (GetAmount() == 1)
                {
                    return random[merchrand](1, 5) * hdm_stock_ammo;
                }
                return randompick[merchrand](1, 2, 3, 3, random[merchrand](2, 6)) * hdm_stock_ammo;
            }
            case SType_Item:
            {
                if (GetBasePrice() <= 15)
                {
                    return randompick[merchrand](1, 2, 2, 3, 3, 3, random[merchrand](4, 7)) * hdm_stock_item;
                }
                if (GetBasePrice() <= 40)
                {
                    return randompick[merchrand](1, 1, 2, 2, 2, 3, 3, 4, 4, 5) * hdm_stock_item;
                }
                if (GetBasePrice() <= 80)
                {
                    return randompick[merchrand](1, 1, 1, 2, 2, 2, 3, 3) * hdm_stock_item;
                }
                return 1 * hdm_stock_item;
            }
        }

        return 666;
    }

    string ToString() {
        return "{ enabled="..IsEnabled()
        ..", type="..GetType()
        ..", chance="..GetChance()
        ..", category="..GetCategory()
        ..", item="..GetItem()
        ..", icon="..GetIcon()
        ..", displayName="..GetDisplayName()
        ..", flavorText="..GetFlavorText()
        ..", baseAmount="..GetAmount()
        ..", basePrice="..GetBasePrice()
        .." }";
    }
}
